generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Brand {
  id      Int       @id @default(autoincrement())
  name    String    @unique(map: "name")
  Product Product[]
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String    @unique(map: "name")
  Product Product[]
}

model Color {
  id           Int            @id @default(autoincrement())
  name         String         @unique(map: "name")
  code         String         @unique(map: "code")
  ProductColor ProductColor[]
}

model Product {
  id           Int            @id @default(autoincrement())
  name         String         @unique(map: "name")
  image        String?
  price        Int?
  discount     Int?
  number       Int?
  categoryId   Int
  brandId      Int
  description  String?        @db.Text
  Detail       Detail[]
  Image        Image[]
  Info         Info[]
  Brand        Brand          @relation(fields: [brandId], references: [id], onUpdate: Restrict, map: "FK_ProductBrand")
  Category     Category       @relation(fields: [categoryId], references: [id], onUpdate: Restrict, map: "FK_ProductCategory")
  ProductColor ProductColor[]

  @@index([brandId], map: "FK_ProductBrand")
  @@index([categoryId], map: "FK_ProductCategory")
}

model ProductColor {
  id        Int     @id
  productId Int
  ccolorId  Int
  Color     Color   @relation(fields: [ccolorId], references: [id], onUpdate: Restrict, map: "FK_ProductColor_ColorId")
  Product   Product @relation(fields: [productId], references: [id], onUpdate: Restrict, map: "FK_ProductColor_ProductId")

  @@index([ccolorId], map: "FK_ProductColor_ColorId")
  @@index([productId], map: "FK_ProductColor_ProductId")
}

model User {
  id            String    @id
  name          String?
  email         String?   @unique
  password      String?   @db.TinyText
  emailVerified DateTime?
  image         String?
  Account       Account[]
}

model Detail {
  id         Int     @id @default(autoincrement())
  productId  Int
  term       String?
  definition String?
  Product    Product @relation(fields: [productId], references: [id], onUpdate: Restrict, map: "FK_Detail_Product")

  @@index([productId], map: "FK_Detail_Product")
}

model Image {
  id        Int     @id @default(autoincrement())
  productId Int
  name      String?
  Product   Product @relation(fields: [productId], references: [id], onUpdate: Restrict, map: "FK_Image_Product")

  @@index([productId], map: "FK_Image_Product")
}

model Info {
  id        Int     @id @default(autoincrement())
  productId Int
  title     String?
  subTitle  String?
  logo      String?
  Product   Product @relation(fields: [productId], references: [id], onUpdate: Restrict, map: "FK_Info_Product")

  @@index([productId], map: "FK_Info_Product")
}
