generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Brand {
  id   Int     @id @default(autoincrement())
  name String? @db.TinyText
}

model Category {
  id   Int     @id @default(autoincrement())
  name String? @db.TinyText
}

model ProductColor {
  id        Int     @id @default(autoincrement())
  productId Int?
  name      String? @db.TinyText
  code      String? @db.TinyText

  @@index([productId], map: "ProductID")
}

model ProductDetail {
  id         Int     @id @default(autoincrement())
  productId  Int?
  term       String? @db.TinyText
  definition String? @db.TinyText

  @@index([productId], map: "productId")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int?
  name      String? @db.TinyText

  @@index([productId], map: "productId")
}

model ProductInfo {
  id        Int     @id @default(autoincrement())
  productId Int?
  title     String? @db.TinyText
  subTitle  String? @db.TinyText
  logo      String? @db.TinyText

  @@index([productId], map: "productId")
}

model product {
  id          Int     @id @default(autoincrement())
  name        String? @db.TinyText
  image       String? @db.TinyText
  price       Int?
  discount    Int?    @default(0)
  number      Int?
  categoryId  Int?
  brandId     Int?
  description String? @db.Text

  @@index([brandId], map: "brandId")
  @@index([categoryId], map: "categoryId")
  @@index([name(length: 250)], map: "product_name")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?   @db.TinyText
  emailVerified DateTime?
  image         String?
  accounts      Account[]
}
